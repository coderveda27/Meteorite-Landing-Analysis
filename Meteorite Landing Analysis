import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

met_df = pd.read_csv("https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/meteorite-landings/meteorite-landings.csv")
met_df.head()
met_df['year'].describe() 

import seaborn as sns

plt.figure(figsize = (20,2))
sns.boxplot(met_df['year'])
plt.show() 
plt.figure(figsize = (20,3))
sns.boxplot(met_df['mass'])
plt.show()
met_df['mass'].describe()

# Descriptive statistics for the 'year' values in the 'met_df' DataFrame. 
met_df['year'].describe()

# Boxplot for the 'pd_series'.
import seaborn as sns # 'sns' is an alias for 'seaborn'.

plt.figure(figsize=(20, 1))
sns.boxplot(met_df['year'])
plt.show()

# Retrieve all the rows from the 'met_df' DataFrame containing the year values less than or equal to 2016.
met_df[met_df['year']<=2016]
# Retrieve all the rows having the year values greater than or equal to 860.
met_df[met_df['year']>=860]
# Retrieve the rows having the year values greater than or equal to 860 and less than or equal to 2016 at the same time.
correct_years_df=met_df[(met_df['year']>=860) & (met_df['year']<=2016)]
correct_years_df

correct_long_df[(correct_long_df['reclat'] == 0) & (correct_long_df['reclong']==0) ]
correct_lat_long_df=correct_long_df[~((correct_long_df['reclat']==0) & (correct_long_df['reclong']==0))]
correct_lat_long_df

#Check whether the 'correct_lat_long_df' DataFrame has missing values or not using the 'isnull()' function.
correct_lat_long_df.isnull().sum()

row_indices = correct_lat_long_df[correct_lat_long_df['mass'].isnull()==True].index
row_indices
# Replace the missing values in the 'mass' column in the 'correct_lat_long_df' DataFrame with median of mass.
median_mass = correct_lat_long_df['mass'].median()
correct_lat_long_df.loc[row_indices, 'mass'] = median_mass 

correct_lat_long_df = correct_long_df[~((correct_long_df['reclat'] == 0) & (correct_long_df['reclong'] == 0))]
correct_lat_long_df

# Missing values in the 'mass' column in the 'correct_lat_long_df' DataFrame with median of mass.
correct_lat_long_df.loc[row_indices, 'mass'] = correct_lat_long_df['mass'].median()

correct_lat_long_df['year'] = correct_lat_long_df['year'].astype('int')
found_relict_df = correct_lat_long_df[(correct_lat_long_df['fall']=='Found' )& (correct_lat_long_df['nametype']=='Relict')]
found_relict_df

found_valid_df = correct_lat_long_df[(correct_lat_long_df['fall']=='Found') & (correct_lat_long_df['nametype']=='Valid')]
found_valid_df

import folium

map1 = folium.Map(location = [0,0], width="90%", height="80%", tiles="Stamen Toner", zoom_start=1)
for i in found_relict_df.index:
    folium.Marker(location = [found_relict_df.loc[i,'reclat'], found_relict_df.loc[i,'reclong']], popup=found_relict_df.loc[i,'name']).add_to(map1)
map1

map_2 = folium.Map(location=[0,0], width='90%',height='90%', tiles= 'Stamen Toner', zoom_start=1) 
for i in met_after_2010.index:
  folium.Marker(location=[met_after_2010.loc[i,'reclat'], met_after_2010.loc[i,'reclong']], popup=met_after_2010.loc[i,'name']).add_to(map_2)
map_2

met_after_1990_df = correct_lat_long_df[correct_lat_long_df['year']>1990]
met_after_1990_df

#Create a count plot for the 'year' values in the 'met_after_1990_df' DataFrame on the x-axis.
import seaborn as sns

plt.figure(figsize=(20,6))
sns.countplot(x='year', data=met_after_1990_df)
plt.grid()
plt.show()

# Non-annotated count plot for the count of the meteorites between the years 1970 & 2000.
import seaborn as sns
plt.figure(figsize=(20, 6))
sns.countplot(x='year', data=correct_lat_long_df[(correct_lat_long_df['year'] >= 1970) & (correct_lat_long_df['year'] < 2001)])
plt.show()
